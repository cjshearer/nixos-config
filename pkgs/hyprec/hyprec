#!/usr/bin/env bash

# forked from: https://github.com/Gustash/Hyprshot/blob/36dbe2e6e97fb96bf524193bf91f3d172e9011a5/hyprshot
# licensed under GNU General Public License v3.0 (see above link for license)

# bug: ignores region selection and records top left corner of screen
set -e

function Help() {
	cat <<EOF
Usage: hyprec [options ..] [-m [mode] ..] -- [command]

Hyprec is a utility to easily record your screen in Hyprland.

It allows recording of windows and monitors which are saved to a folder of your choosing.

Examples:
  record a window          \`hyprec -m window\`
  record active window     \`hyprec -m window -m active\`
  record selected monitor  \`hyprec -m output -m DP-1\`

Options:
  -h, --help                show help message
  -m, --mode                one of: output, window, region, active, OUTPUT_NAME
  -o, --output-folder       directory in which to save recording
  -f, --filename            the file name of the resulting recording
  -d, --debug               print debug information
  -s, --silent              don't send notification when recording is saved
  -t, --notif-timeout       notification timeout in milliseconds (default 5000)
  -- [command]              open recording with a command of your choosing
                            (e.g. \`hyprec -m window -- vlc\`)

Modes:
  output        record entire monitor
  window        record open window
  region        record selected region
  active        record active window|output
                (you must use --mode again with the intended selection)
  OUTPUT_NAME   record output with OUTPUT_NAME
                (you must use --mode again with the intended selection)
                (you can get this from \`hyprctl monitors\`)
EOF
}

function Print() {
	if [ $DEBUG -eq 0 ]; then
		return 0
	fi

	1>&2 printf '%s' "$@"
}

function send_notification() {
	if [ $SILENT -eq 1 ]; then
		return 0
	fi

	local clickedNotification
	clickedNotification=$(notify-send "Recording saved" \
		"Video copied to the clipboard and saved in <i>${1}</i>." \
		-t "$NOTIF_TIMEOUT" -i "${1}" -a Hyprec -A "default=Open File Location")
	if [[ -n $clickedNotification ]]; then 
		xdg-open "$SAVEDIR"
	fi
}

function trim() {
	local geometry="${1}"
	local xy_str wh_str x y width height max_width max_height
	xy_str=$(echo "${geometry}" | cut -d' ' -f1)
	wh_str=$(echo "${geometry}" | cut -d' ' -f2)
	x=$(echo "${xy_str}" | cut -d',' -f1)
	y=$(echo "${xy_str}" | cut -d',' -f2)
	width=$(echo "${wh_str}" | cut -dx -f1)
	height=$(echo "${wh_str}" | cut -dx -f2)

	max_width=$(hyprctl monitors -j | jq -r '[.[] | if (.transform % 2 == 0) then (.x + .width) else (.x + .height) end] | max')
	max_height=$(hyprctl monitors -j | jq -r '[.[] | if (.transform % 2 == 0) then (.y + .height) else (.y + .width) end] | max')

	local cropped_x=$x
	local cropped_y=$y
	local cropped_width=$width
	local cropped_height=$height

	if ((x + width > max_width)); then
		cropped_width=$((max_width - x))
	fi
	if ((y + height > max_height)); then
		cropped_height=$((max_height - y))
	fi

	if ((x < 0)); then
		cropped_x=0
		cropped_width=$((cropped_width + x))
	fi
	if ((y < 0)); then
		cropped_y=0
		cropped_height=$((cropped_height + y))
	fi

	printf "%s,%s %sx%s\n" \
		"${cropped_x}" "${cropped_y}" \
		"${cropped_width}" "${cropped_height}"
}

function save_geometry() {
	Print "Geometry: %s\n" "${1}"
	local cropped_geometry
	cropped_geometry=$(trim "${1}")
	Print "Crop: %s\n" "${cropped_geometry}"
	local output=""

	mkdir -p "$SAVEDIR"
	wl-screenrec -g "${cropped_geometry}" -f "$SAVE_FULLPATH"
	output="$SAVE_FULLPATH"
	wl-copy -t text/uri-list "file://$output"
	[ -z "$COMMAND" ] || {
		"$COMMAND" "$output"
	}
	send_notification "$output"
}

function begin_grab() {
	local option=$1
	local geometry
	case $option in
	output)
		if [ $CURRENT -eq 1 ]; then
			geometry=$(grab_active_output)
		elif [ -z "$SELECTED_MONITOR" ]; then
			geometry=$(grab_output)
		else
			geometry=$(grab_selected_output "$SELECTED_MONITOR")
		fi
		;;
	region)
		geometry=$(grab_region)
		;;
	window)
		if [ $CURRENT -eq 1 ]; then
			geometry=$(grab_active_window)
		else
			geometry=$(grab_window)
		fi
		;;
	esac
	save_geometry "${geometry}"
}

function grab_output() {
	slurp -or
}

function grab_active_output() {
	local active_workspace monitors current_monitor
	active_workspace=$(hyprctl -j activeworkspace)
	monitors=$(hyprctl -j monitors)
	Print "Monitors: %s\n" "$monitors"
	Print "Active workspace: %s\n" "$active_workspace"
	current_monitor="$(echo "$monitors" | jq -r 'first(.[] | select(.activeWorkspace.id == '"$(echo "$active_workspace" | jq -r '.id')"'))')"
	Print "Current output: %s\n" "$current_monitor"
	echo "$current_monitor" | jq -r '"\(.x),\(.y) \(.width/.scale|round)x\(.height/.scale|round)"'
}

function grab_selected_output() {
	local monitor
	monitor=$(hyprctl -j monitors | jq -r '.[] | select(.name == "'"$1"'")')
	Print "Capturing: %s\n" "${1}"
	echo "$monitor" | jq -r '"\(.x),\(.y) \(.width/.scale|round)x\(.height/.scale|round)"'
}

function grab_region() {
	slurp -d
}

function grab_window() {
	local monitors clients boxes
	monitors=$(hyprctl -j monitors)
	clients=$(hyprctl -j clients | jq -r '[.[] | select(.workspace.id | contains('"$(echo "$monitors" | jq -r 'map(.activeWorkspace.id) | join(",")')"'))]')
	Print "Monitors: %s\n" "$monitors"
	Print "Clients: %s\n" "$clients"
	# Generate boxes for each visible window and send that to slurp
	# through stdin
	boxes="$(echo "$clients" | jq -r '.[] | "\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1]) \(.title)"')"
	Print "Boxes:\n%s\n" "$boxes"
	slurp -r <<<"$boxes"
}

function grab_active_window() {
	local active_window box
	active_window=$(hyprctl -j activewindow)
	box=$(echo "$active_window" | jq -r '"\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1])"')
	Print "Box:\n%s\n" "$box"
	echo "$box"
}

function parse_mode() {
	local mode="${1}"

	case $mode in
	window | region | output)
		OPTION=$mode
		;;
	active)
		CURRENT=1
		;;
	*)
		hyprctl monitors -j | jq -re '.[] | select(.name == "'"$($mode)"'")' &>/dev/null
		SELECTED_MONITOR=$mode
		;;
	esac
}

function args() {
	local options
	options=$(getopt -o hf:o:m:dsrt: --long help,filename:,output-folder:,mode:,debug,silent,notif-timeout: -- "$@")
	eval set -- "$options"

	while true; do
		case "$1" in
		-h | --help)
			Help
			exit
			;;
		-o | --output-folder)
			shift
			SAVEDIR=$1
			;;
		-f | --filename)
			shift
			FILENAME=$1
			;;
		-m | --mode)
			shift
			parse_mode "$1"
			;;
		-d | --debug)
			DEBUG=1
			;;
		-s | --silent)
			SILENT=1
			;;
		-t | --notif-timeout)
			shift
			NOTIF_TIMEOUT=$1
			;;
		--)
			shift # Skip -- argument
			COMMAND=${*:2}
			break
			;;
		esac
		shift
	done

	if [ -z "$OPTION" ]; then
		Print "A mode is required\n\nAvailable modes are:\n\toutput\n\tregion\n\twindow\n"
		exit 2
	fi
}

if [ -z "${1-}" ]; then
	Help
	exit
fi

DEBUG=0
SILENT=0
NOTIF_TIMEOUT=5000
CURRENT=0
[ -z "${XDG_VIDEOS_DIR-}" ] && type xdg-user-dir &>/dev/null && XDG_VIDEOS_DIR=$(xdg-user-dir VIDEOS)
FILENAME="$(date +'%Y-%m-%d-%H%M%S_hyprec.mp4')"
[ -z "${HYPREC_DIR-}" ] && SAVEDIR=${XDG_VIDEOS_DIR:=~} || SAVEDIR=${HYPREC_DIR}

args "$0" "$@"

SAVE_FULLPATH="$SAVEDIR/$FILENAME"
Print "Saving in: %s\n" "$SAVE_FULLPATH"
begin_grab "$OPTION"
